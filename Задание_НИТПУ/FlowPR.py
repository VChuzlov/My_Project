import math
class FlowPR:
    p = 12000  # давление, кПа
    T = 39.99  # температура, С
    N_comp = 24  # колиество компонентов
    R = 8.314   # Дж/(моль·K) газовая постоянная
    Name_comp = ['Метан', 'Этан', 'Пропан', 'Изобутан', 'Н-бутан', 'Азот']

    K = [0 for i in range(N_comp)]  # константы скорости
    p_cr = [3394.3701171875, 7370, 4640.68017578125, 4883.85009765625, 4256.66015625, 3647.6201171875,
            3796.6201171875, 3333.59008789063, 3375.1201171875, 3031.6201171875, 22120, 7376.4501953125,
            2940, 2900, 1840, 1850, 1120, 1260, 940, 6340, 3660, 3040, 2160, 1680,]  # критические давления, кПа
    T_cr = [-146.955999755859, 30.9500061035156, -82.4509948730469, 32.2780090332031, 96.7480102539063,
            134.946008300781, 152.049005126953, 187.248010253906, 196.450006103516, 234.748010253906,
            374.149011230469, 239.448022460938, 268.930017089844, 317.130029296875, 437.930017089844,
            423.909997558594, 578.560021972656, 604.440026855469, 692.980004882813, 791.419946289063,
            253.430017089844, 326.230004882813, 416.209985351563, 468.659997558594,]  # критические температуры, С
    w = [0.0399998016655445, 0.238940000534058, 0.0114984000101686, 0.0986000001430511, 0.152400001883507,
         0.184790000319481, 0.20100000500679, 0.222240000963211, 0.253890007734299, 0.300700008869171,
         0.34400001168251, 0.556990027427673, 0.303999990224838, 0.381399989128113, 0.531899988651276,
         0.623799979686737, 1.02820003032684, 0.861800014972687, 1.19289994239807, 1.53349995613098,
         0.191980004310608, 0.259950011968613, 0.426470011472702, 1.24304997920989,]  # ацентрические факторы
    conz = [1.05737056150428e-003,6.53704449523532e-003,0.828296705538820,5.49382086685735e-002,3.58025524375467e-002,
            9.23987292766176e-003,1.18029871998247e-002,4.42543284086859e-003,3.89416688287228e-003,
            4.95491525633690e-003,7.02722328609671e-003,0.000000000000000,1.13429346821726e-003,
            1.81851099714553e-002,3.83441796434515e-004,8.65775195186610e-003,2.42773423276806e-003,
            7.82305780618743e-005,6.63254149994465e-006,1.85361158435203e-006,5.17848488713895e-004,
            4.40254248892707e-004,1.84840116077909e-004,5.52889908774407e-006]  # начальные конц,
    Mr = [28.0130004882813, 44.0097007751465, 16.0429000854492, 30.0699005126953, 44.0970001220703,
          58.1240005493164, 58.1240005493164, 72.1510009765625, 72.1510009765625, 86.1779022216797,
          18.015100479126, 32.0419006347656, 97.349998474121, 118.529998779297, 198.809997558594,
          191.320007324219, 330.380004882813, 339.049987792969, 454.839996337891, 543,
          84.8199996948242, 115.069999694824, 171.919998168945, 217.960006713867,]
    conz_x = [0 for i in range(N_comp)]  # концентрация в жид
    conz_y = [0 for i in range(N_comp)]  # концентрация в газ

    w_conz = [0 for i in range(N_comp)]  # массовая концентрация

    p_cr_am = [0 for i in range(N_comp)]  # критические давления, фунты на квадратный дюйм
    T_cr_am = [0 for i in range(N_comp)]  # критические температуры, градусы Рэнкина
    p_am = 0  # температура, градусы Рэнкина
    T_am = 0  # давление, фунты на квадратный дюйм
    p_r = [0 for i in range(N_comp)]  # приведенные давления
    T_r = [0 for i in range(N_comp)]  # приведенные температуры
    Ab = [[0 for i in range(24)] for j in range(N_comp)]
    kij = [
    (
        0, -0.0199970006942749, 3.59990000724792e-002, 5.00000007450581e-002, 7.99980014562607e-002,
        9.49990004301071e-002, 9.00000035762787e-002, 9.49990004301071e-002, 0.100000001490116, 0.149000003933907,
        -2.23799991607666, -0.214100003242493, 0.100000001490116, 0.100000001490116, 0.100000001490116,
        0.100000001490116, 0.100000001490116, 0.100000001490116, 0.100000001490116, 0.100000001490116,
        0.100000001490116, 0.100000001490116, 0.100000001490116, 0.100000001490116,
    ),

    (
        -0.0199970006942749, 0, 0.100000001490116, 0.129800006747246, 0.135000005364418, 0.129800006747246,
        0.129800006747246, 0.125000000000000, 0.125000000000000, 0.125000000000000, -0.557200014591217,
        3.99990007281303e-002, 0.101000003516674, 0.101000003516674, 0.101000003516674, 0.101000003516674,
        0.101000003516674, 0.101000003516674, 0.101000003516674, 0.101000003516674, 0.101000003516674,
        0.101000003516674, 0.101000003516674, 0.101000003516674,
    ),

    (
        0.0359990000724792, 0.100000001490116, 0, 2.24137306213379e-003, 6.82878494262695e-003, 1.31134390830994e-002,
        1.23046040534973e-002, 0.017627477645874, 1.79253816604614e-002, 2.34740376472473e-002, 0.500000000000000,
        -3.50000001490116e-002, 2.63989567756653e-002, 3.31320762634277e-002, 5.46744465827942e-002,
        5.49260377883911e-002, 8.52891802787781e-002, 7.86592960357666e-002, 9.18952822685242e-002, 0.119476377964020,
        0.019849419593811, 0.030252218246460, 4.82873320579529e-002, 0.0611204504966736,
    ),

    (
        0.0500000007450581, 0.129800006747246, 2.24137306213379e-003, 0, 1.25795602798462e-003, 4.57346439361572e-003,
        4.09638881683350e-003, 7.41332769393921e-003, 7.60942697525024e-003, 1.14138126373291e-002, 0.500000000000000,
        4.50000017881393e-002, 1.35135650634766e-002, 1.85338258743286e-002, 3.57504487037659e-002,
        3.59590649604797e-002, 0.061974048614502, 5.61718344688416e-002, 6.78104162216187e-002, 9.26712155342102e-002,
        8.89801979064941e-003, 1.63582563400269e-002, 3.05047035217285e-002, 0.0411370396614075,
    ),

    (
        0.0799980014562607, 0.135000005364418, 6.82878494262695e-003, 1.25795602798462e-003, 0, 1.04051828384399e-003,
        8.18967819213867e-004, 2.58338451385498e-003, 2.70050764083862e-003, 5.14197349548340e-003, 0.479999989271164,
        5.99990002810955e-002, 6.59322738647461e-003, 1.02579593658447e-002, 2.39947438240051e-002,
        2.41683125495911e-002, 4.65860366821289e-002, 4.14775609970093e-002, 5.17726540565491e-002,
        7.42979645729065e-002, 3.49390506744385e-003, 8.64130258560181e-003, 1.96757316589355e-002, 0.0285152196884155,
    ),

    (
        0.0949990004301071, 0.129800006747246, 1.31134390830994e-002, 4.57346439361572e-003, 1.04051828384399e-003, 0,
        1.33514404296875e-005, 3.46183776855469e-004, 3.90052795410156e-004, 1.56527757644653e-003, 0.479999989271164,
        6.89980015158653e-002, 2.41094827651978e-003, 4.80335950851440e-003, 1.52305960655212e-002,
        1.53704881668091e-002, 0.034291684627533, 2.98642516136169e-002, 3.88372540473938e-002, 5.90282678604126e-002,
        7.24434852600098e-004, 3.71235609054565e-003, 1.17993354797363e-002, 0.0189170241355896,
    ),

    (
        0.0900000035762787, 0.129800006747246, 1.23046040534973e-002, 4.09638881683350e-003, 8.18967819213867e-004,
        1.33514404296875e-005, 0, 4.95135784149170e-004, 5.47230243682861e-004, 1.86634063720703e-003,
        0.479999989271164, 6.89980015158653e-002, 2.78091430664063e-003, 5.31852245330811e-003, 1.61255598068237e-002,
        0.016269326210022, 3.55952382087708e-002, 3.10885310173035e-002, 4.02154922485352e-002, 6.06796741485596e-002,
        9.33766365051270e-004, 4.16743755340576e-003, 1.25921368598938e-002, 0.01990807056427,
    ),

    (
        0.0949990004301071, 0.125, 0.017627477645874, 7.41332769393921e-003, 2.58338451385498e-003,
        3.46183776855469e-004, 4.95135784149170e-004, 0, 1.25169754028320e-006, 4.39941883087158e-004,
        0.479999989271164, 5.99990002810955e-002, 9.31978225708008e-004, 2.57861614227295e-003, 1.10472440719604e-002,
        1.11671090126038e-002, 2.79856324195862e-002, 2.39706039428711e-002, 3.21415662765503e-002,
        5.09008765220642e-002, 6.90817832946777e-005, 1.79612636566162e-003, 8.14414024353027e-003, 0.0142353773117065,
    ),

    (
        0.100000001490116, 0.125, 1.79253816604614e-002, 7.60942697525024e-003, 2.70050764083862e-003,
        3.90052795410156e-004, 5.47230243682861e-004, 1.25169754028320e-006, 0, 3.93450260162354e-004,
        0.479999989271164, 5.99990002810955e-002, 8.63611698150635e-004, 2.46435403823853e-003, 1.08116865158081e-002,
        1.09302997589111e-002, 0.027617871761322, 2.36285328865051e-002, 0.031749427318573, 5.04189133644104e-002,
        5.13792037963867e-005, 1.70087814331055e-003, 7.94124603271484e-003, 0.0139687657356262,
    ),

    (
        0.149000003933907, 0.125, 2.34740376472473e-002, 1.14138126373291e-002, 5.14197349548340e-003,
        1.56527757644653e-003, 1.86634063720703e-003, 4.39941883087158e-004, 3.93450260162354e-004, 0,
        0.479999989271164, 5.09990006685257e-002, 9.14335250854492e-005, 8.90731811523438e-004, 7.11709260940552e-003,
        7.21383094787598e-003, 2.15958952903748e-002, 1.80613398551941e-002, 2.52966284751892e-002, 0.042371928691864,
        1.60336494445801e-004, 4.59194183349609e-004, 4.82100248336792e-003, 0.0097307562828064,
    ),

    (
        -2.23799991607666, -0.557200014591217, 0.500000000000000, 0.500000000000000, 0.479999989271164,
        0.479999989271164, 0.479999989271164, 0.479999989271164, 0.479999989271164, 0.479999989271164, 0,
        -0.180000007152557, 0.479999989271164, 0.479999989271164, 0.479999989271164, 0.479999989271164,
        0.479999989271164, 0.479999989271164, 0.479999989271164, 0.479999989271164, 0.479999989271164,
        0.479999989271164, 0.479999989271164, 0.479999989271164,
    ),

    (
        -0.214100003242493, 0.0399990007281303, -3.50000001490116e-002, 4.50000017881393e-002, 5.99990002810955e-002,
        6.89980015158653e-002, 6.89980015158653e-002, 5.99990002810955e-002, 5.99990002810955e-002,
        5.09990006685257e-002, -0.180000007152557, 0, 0.000000000000000, 0.000000000000000, 0.000000000000000,
        0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,
        0.000000000000000, 0.000000000000000, 0.000000000000000, 0,
    ),

    (
        0.100000001490116, 0.101000003516674, 2.63989567756653e-002, 1.35135650634766e-002, 6.59322738647461e-003,
        2.41094827651978e-003, 2.78091430664063e-003, 9.31978225708008e-004, 8.63611698150635e-004,
        9.14335250854492e-005, 0.479999989271164, 0.000000000000000, 0, 4.11748886108398e-004, 5.60659170150757e-003,
        5.69266080856323e-003, 1.89434885978699e-002, 1.56329274177551e-002, 2.24316120147705e-002, 0.038716197013855,
        4.93884086608887e-004, 1.40905380249023e-004, 3.59070301055908e-003, 0.00795465707778931,
    ),

    (
        0.100000001490116, 0.101000003516674, 3.31320762634277e-002, 1.85338258743286e-002, 1.02579593658447e-002,
        4.80335950851440e-003, 5.31852245330811e-003, 2.57861614227295e-003, 2.46435403823853e-003,
        8.90731811523438e-004, 0.479999989271164, 0.000000000000000, 4.11748886108398e-004, 0, 2.99096107482910e-003,
        3.05414199829102e-003, 1.38660073280334e-002, 1.10403299331665e-002, 1.68929100036621e-002,
        3.14540266990662e-002, 1.80548429489136e-003, 7.09295272827148e-005, 1.57541036605835e-003, 0.00476843118667603,
    ),

    (
        0.100000001490116, 0.101000003516674, 5.46744465827942e-002, 3.57504487037659e-002, 2.39947438240051e-002,
        1.52305960655212e-002, 1.61255598068237e-002, 1.10472440719604e-002, 1.08116865158081e-002,
        7.11709260940552e-003, 0.479999989271164, 0.000000000000000, 5.60659170150757e-003, 2.99096107482910e-003, 0,
        2.98023223876953e-007, 4.04185056686401e-003, 2.57527828216553e-003, 5.76937198638916e-003,
        1.54160857200623e-002, 9.38928127288818e-003, 3.97849082946777e-003, 2.26140022277832e-004,
        0.000208258628845215,
    ),

    (
        0.100000001490116, 0.101000003516674, 5.49260377883911e-002, 3.59590649604797e-002, 2.41683125495911e-002,
        1.53704881668091e-002, 0.016269326210022, 1.11671090126038e-002, 1.09302997589111e-002, 7.21383094787598e-003,
        0.479999989271164, 0.000000000000000, 5.69266080856323e-003, 3.05414199829102e-003, 2.98023223876953e-007, 0,
        3.96913290023804e-003, 2.51728296279907e-003, 5.68282604217529e-003, 1.52760744094849e-002,
        9.50008630752563e-003, 4.05120849609375e-003, 2.43782997131348e-004, 0.000191986560821533,
    ),

    (
        0.100000001490116, 0.101000003516674, 8.52891802787781e-002, 0.061974048614502, 4.65860366821289e-002,
        0.034291684627533, 3.55952382087708e-002, 2.79856324195862e-002, 0.027617871761322, 2.15958952903748e-002,
        0.479999989271164, 0.000000000000000, 1.89434885978699e-002, 1.38660073280334e-002, 4.04185056686401e-003,
        3.96913290023804e-003, 0, 1.65939331054688e-004, 1.55150890350342e-004, 3.74412536621094e-003,
        0.025361180305481, 1.58811807632446e-002, 6.16550445556641e-003, 0.00242060422897339,
    ),

    (
        0.100000001490116, 0.101000003516674, 7.86592960357666e-002, 5.61718344688416e-002, 4.14775609970093e-002,
        2.98642516136169e-002, 3.10885310173035e-002, 2.39706039428711e-002, 2.36285328865051e-002,
        1.80613398551941e-002, 0.479999989271164, 0.000000000000000, 1.56329274177551e-002, 1.10403299331665e-002,
        2.57527828216553e-003, 2.51728296279907e-003, 1.65939331054688e-004, 0, 6.41584396362305e-004,
        5.47534227371216e-003, 2.15346217155457e-002, 1.28527283668518e-002, 4.31966781616211e-003, 0.00132119655609131,
    ),

    (
        0.100000001490116, 0.101000003516674, 9.18952822685242e-002, 6.78104162216187e-002, 5.17726540565491e-002,
        3.88372540473938e-002, 4.02154922485352e-002, 3.21415662765503e-002, 0.031749427318573, 2.52966284751892e-002,
        0.479999989271164, 0.000000000000000, 2.24316120147705e-002, 1.68929100036621e-002, 5.76937198638916e-003,
        5.68282604217529e-003, 1.55150890350342e-004, 6.41584396362305e-004, 0, 2.37935781478882e-003,
        2.93385982513428e-002, 1.91010236740112e-002, 8.25661420822144e-003, 0.00379562377929688,
    ),

    (
        0.100000001490116, 0.101000003516674, 0.119476377964020, 9.26712155342102e-002, 7.42979645729065e-002,
        5.90282678604126e-002, 6.06796741485596e-002, 5.09008765220642e-002, 5.04189133644104e-002, 0.042371928691864,
        0.479999989271164, 0.000000000000000, 0.038716197013855, 3.14540266990662e-002, 1.54160857200623e-002,
        1.52760744094849e-002, 3.74412536621094e-003, 5.47534227371216e-003, 2.37935781478882e-003, 0,
        4.74392771720886e-002, 3.43844890594482e-002, 1.92869305610657e-002, 0.0120945572853088,
    ),

    (
        0.100000001490116, 0.101000003516674, 0.019849419593811, 8.89801979064941e-003, 3.49390506744385e-003,
        7.24434852600098e-004, 9.33766365051270e-004, 6.90817832946777e-005, 5.13792037963867e-005,
        1.60336494445801e-004, 0.479999989271164, 0.000000000000000, 4.93884086608887e-004, 1.80548429489136e-003,
        9.38928127288818e-003, 9.50008630752563e-003, 0.025361180305481, 2.15346217155457e-002, 2.93385982513428e-002,
        4.74392771720886e-002, 0, 1.16163492202759e-003, 6.72543048858643e-003, 0.0123513340950012,
    ),

    (
        0.100000001490116, 0.101000003516674, 0.030252218246460, 1.63582563400269e-002, 8.64130258560181e-003,
        3.71235609054565e-003, 4.16743755340576e-003, 1.79612636566162e-003, 1.70087814331055e-003,
        4.59194183349609e-004, 0.479999989271164, 0.000000000000000, 1.40905380249023e-004, 7.09295272827148e-005,
        3.97849082946777e-003, 4.05120849609375e-003, 1.58811807632446e-002, 1.28527283668518e-002,
        1.91010236740112e-002, 3.43844890594482e-002, 1.16163492202759e-003, 0, 2.31301784515381e-003,
        0.00599378347396851,
    ),

    (
        0.100000001490116, 0.101000003516674, 4.82873320579529e-002, 3.05047035217285e-002, 1.96757316589355e-002,
        1.17993354797363e-002, 1.25921368598938e-002, 8.14414024353027e-003, 7.94124603271484e-003,
        4.82100248336792e-003, 0.479999989271164, 0.000000000000000, 3.59070301055908e-003, 1.57541036605835e-003,
        2.26140022277832e-004, 2.43782997131348e-004, 6.16550445556641e-003, 4.31966781616211e-003,
        8.25661420822144e-003, 1.92869305610657e-002, 6.72543048858643e-003, 2.31301784515381e-003, 0,
        0.000868022441864014,
    ),

    (
        0.100000001490116, 0.101000003516674, 6.11204504966736e-002, 4.11370396614075e-002, 2.85152196884155e-002,
        1.89170241355896e-002, 0.019908070564270, 1.42353773117065e-002, 1.39687657356262e-002, 9.73075628280640e-003,
        0.479999989271164, 0.000000000000000, 7.95465707778931e-003, 4.76843118667603e-003, 2.08258628845215e-004,
        1.91986560821533e-004, 2.42060422897339e-003, 1.32119655609131e-003, 3.79562377929688e-003,
        1.20945572853088e-002, 1.23513340950012e-002, 5.99378347396851e-003, 8.68022441864014e-004, 0,
    ),
           ]  # бинарные коэффициенты

    a_Cp = [[2.36459,1.1429,0.395,0.1533,0.00854058,0.9827466],
            [-0.00426494,-0.0006472,0.00422818,0.00526958,0.00655398,0.00019428482],
            [0.0000169854,0.0000127293,0.000001189458,0.0000002181678,-0.00000332904,-0.0000000012473841],
            [-0.00000001489904,-0.00000001357264,-0.000000002668704,-0.000000002911584,0.000000000706584,-0.000000000014621936],
            [0.00000000000430448,0.00000000000441048,0.00000000000083968,0.00000000000118368,-3.19963E-14,2.0250665E-15]
           ]
    a_H = [[-12.98,-1.7675,39.4889,30.903,67.721,2.888634],
           [2.36459,1.1429,0.395,0.1533,0.00854058,0.9827466],
           [-0.00213247,-0.0003236,0.00211409,0.00263479,0.00327699,0.00009714241],
           [0.0000056618,0.0000042431,0.000000396486,0.0000000727226,-0.00000110968,-0.0000000004157947],
           [-0.00000000372476,-0.00000000339316,-0.000000000667176,-0.000000000727896,0.000000000176646,-0.000000000003655484],
           [0.000000000000860896,0.000000000000882096,0.000000000000167936,0.000000000000236736,-6.39926E-15,4.050133E-16]
          ]
    Bp = [0 for i in range(N_comp)]
    Ap = [0 for i in range(N_comp)]
    Av = 0
    Bv = 0
    Al = 0
    Bl = 0
    e = 0  # доля отгона
    Zv = 0
    Zl = 0
    Fiv = [0 for i in range(N_comp)]
    Fil = [0 for i in range(N_comp)]
    OldK = [0 for i in range(N_comp)]
    psat = [0 for _ in range(N_comp)]

    def recalc_P_T(self):
        '''Пересчет температуры в град. Рэнкина, давления в фунты на квадратный дюйм'''
        self.p_am = self.p * 0.145
        self.T_am = self.T * 1.8 + 491.67
        for i in range(self.N_comp):
            self.p_cr_am[i] = self.p_cr[i] * 0.145
            self.T_cr_am[i] = self.T_cr[i] * 1.8 + 491.67
            self.p_r[i] = self.p_am / self.p_cr_am[i]
            self.T_r[i] = self.T_am / self.T_cr_am[i]

    def calcK_Wilson(self):
        '''Расчет констант равновесия по уравнению Вильсона для начального приближения'''
        for i in range(self.N_comp):
            self.psat[i] = self.p_cr_am[i] * math.exp(
                5.37 * (1 + self.w[i]) * (1 - self.T_cr_am[i] / self.T_am))
            self.K[i] = self.psat[i] / self.p_am

    def calc_Ab_Bp(self):
        '''Расчет вириальных коэффициентов'''
        Alfa = [0 for i in range(self.N_comp)]
        m = [0 for i in range(self.N_comp)]
        for i in range(self.N_comp):
            self.Bp[i] = 0.077796074 * self.p_r[i] / self.T_r[i]
            m[i] = 0.37464 + 1.54226 * self.w[i] - 0.26992 * self.w[i] * self.w[i]
            Alfa[i] = math.pow(1 + m[i] * (1 - math.sqrt(self.T_r[i])), 2)
            self.Ap[i] = 0.457235529 * Alfa[i] * self.p_r[i] / math.pow(self.T_r[i], 2)
        for i in range(self.N_comp):
            for j in range(self.N_comp):
                # if (i!=j):
                self.Ab[i][j] = (1 - self.kij[i][j]) * math.sqrt(self.Ap[i] * self.Ap[j])

    def calc_Av_Bv(self):
        '''Расчет вириальных коэффициентов'''
        self.Av = 0
        for i in range(self.N_comp):
            for j in range(self.N_comp):
                self.Av += self.conz_y[i] * self.conz_y[j] * self.Ab[i][j]
        self.Bv = 0
        for i in range(self.N_comp):
            self.Bv += self.conz_y[i] * self.Bp[i]

    def calc_Al_Bl(self):
        self.Al = 0
        for i in range(self.N_comp):
            for j in range(self.N_comp):
                self.Al += self.conz_x[i] * self.conz_x[j] * self.Ab[i][j]
        self.Bl = 0
        for i in range(self.N_comp):
            self.Bl += self.conz_x[i] * self.Bp[i]

    def calcCubeExp(self, A, B, C):
        '''Решение кубического уравнения тригонометрической формулой Виета
        x^3+Ax^2+Bx+C=0
        '''

        def sgn(x):
            if x > 0:
                return 1
            if x == 0:
                return 0
            if x < 0:
                return -1

        x1 = 'null'
        x2 = 'null'
        x3 = 'null'
        Q = (A * A - 3 * B) / 9
        R = (2 * A * A * A - 9 * A * B + 27 * C) / 54
        S = Q * Q * Q - R * R
        if S > 0:
            fi = 1 / 3 * math.acos(R / math.pow(Q, 3 / 2))
            x1 = -2 * math.sqrt(Q) * math.cos(fi) - A / 3
            if x1 < 0:
                x1 = 'null'
            x2 = -2 * math.sqrt(Q) * math.cos(fi + 2 / 3 * 3.14) - A / 3
            if x2 < 0:
                x2 = 'null'
            x3 = -2 * math.sqrt(Q) * math.cos(fi - 2 / 3 * 3.14) - A / 3
            if x3 < 0:
                x3 = 'null'
        if S < 0:
            if Q > 0:
                fi = 1 / 3 * math.acosh(abs(R) / math.pow(Q, 3 / 2))
                x1 = -2 * sgn(R) * math.sqrt(Q) * math.cosh(fi) - A / 3
                if x1 < 0:
                    x1 = 'null'
            if Q < 0:
                sss = abs(R) / math.pow(abs(Q), 3 / 2)
                fi = 1 / 3 * math.asinh(sss)
                x1 = -2 * sgn(R) * math.sqrt(abs(Q)) * math.sinh(fi) - A / 3
                if x1 < 0:
                    x1 = 'null'
            if Q == 0:
                x1 = -math.pow(C - A * A * A / 27, 1 / 3) - A / 3
                if x1 < 0:
                    x1 = 'null'
        if S == 0:
            x1 = -2 * sgn(R) * math.sqrt(Q) - A / 3
            if x1 < 0:
                x1 = 'null'
            x2 = sgn(R) * math.sqrt(Q) - A / 3
            if x2 < 0:
                x2 = 'null'
        return x1, x2, x3

    def FazeCalc(self):
        ''' расчет на фазовое состояние (одна или две фазы)0- две фазы, 1- 1 одна жидкая, 2- одна газовая, 3 - точка начала кипения, 4- точка начала росы'''
        S1 = 0
        S2 = 0
        for i in range(self.N_comp):
            S1 += self.conz[i] * self.K[i]
            if self.K[i] > 0:
                S2 += self.conz[i] / self.K[i]
        # print(S1, S2)
        if S1 > 1 and S2 > 1:
            return 0  # 2 фазы
        if S1 < 1:
            return 1  # жидкая
        if S2 < 1:
            return 2  # газовая
        if S1 == 1:
            return 3  # точка кипения
        if S2 == 1:
            return 4  # точка росы
        return -1

    def Rashford_Rice(self, _fc):  # расчет мольной доли отгона
        def fn(_e):
            s = 0;
            for i in range(self.N_comp):
                if self.K[i] > 0:
                    s += self.conz[i] * (self.K[i] - 1) / (1 + _e * (self.K[i] - 1))
            return s

        eps = 1e-9
        a = 0
        b = 1
        _e = (a + b) / 2
        if _fc == 3:
            _e = 0
        if _fc == 4:
            _e = 1
        if fn(a) * fn(b) < 0:
            while abs(a - b) > eps:
                _e = (a + b) / 2;
                if fn(a) * fn(_e) > 0:
                    a = _e
                else:
                    b = _e
                _e = (a + b) / 2

        for i in range(self.N_comp):
            self.conz_x[i] = self.conz[i] / (1 + _e * (self.K[i] - 1));
            self.conz_y[i] = self.K[i] * self.conz_x[i]

        self.e = _e;

    def calc_x_y(self):

        fc = self.FazeCalc()
        e_old = self.e
        if fc in [0, 3, 4]:
            self.Rashford_Rice(fc)
            if self.e >= 1:
                self.e = 1
                for i in range(self.N_comp):
                    self.conz_x[i] = 0
                    self.conz_y[i] = self.conz[i]

            if self.e <= 0:
                self.e = 0;
                for i in range(self.N_comp):
                    self.conz_x[i] = self.conz[i]
                    self.conz_y[i] = 0

        if fc == 1:
            self.e = 0
            for i in range(self.N_comp):
                self.conz_x[i] = self.conz[i]
                self.conz_y[i] = 0

        if fc == 2:
            self.e = 1
            for i in range(self.N_comp):
                self.conz_x[i] = 0
                self.conz_y[i] = self.conz[i]

    def calc_Fiv_Fil(self):
        for i in range(self.N_comp):
            sum_x = 0
            sum_y = 0
            for j in range(self.N_comp):
                sum_x += self.Ab[i][j] * self.conz_x[j]
                sum_y += self.Ab[i][j] * self.conz_y[j]

            self.Fiv[i] = math.exp((self.Zv - 1) * self.Bp[i] / self.Bv - math.log(self.Zv - self.Bv) - \
                                   self.Av / (math.sqrt(2) * self.Bv) * (sum_y / self.Av - \
                                                                         self.Bp[i] / self.Bv / 2) * math.log(
                (self.Zv + (1 + math.sqrt(2)) * self.Bv) / (self.Zv - (-1 + math.sqrt(2)) * self.Bv)))

            self.Fil[i] = math.exp((self.Zl - 1) * self.Bp[i] / self.Bl - math.log(self.Zl - self.Bl) - \
                                   self.Al / (math.sqrt(2) * self.Bl) * (sum_x / self.Al - \
                                                                         self.Bp[
                                                                             i] / self.Bl / 2) * math.log(
                (self.Zl + (1 + math.sqrt(2)) * self.Bl) / (self.Zl - (-1 + math.sqrt(2)) * self.Bl)))

    def memoryK(self):
        for i in range(self.N_comp):
            self.OldK[i] = self.K[i]

    def calcK_PR(self):
        for i in range(self.N_comp):
            self.K[i] = self.Fil[i] / self.Fiv[i]

    def calc_pogr(self):
        s = 0
        for i in range(self.N_comp):
            s += abs(self.OldK[i] - self.K[i])
        return s

    def pred_calculation(self):
        self.recalc_P_T()
        self.calcK_Wilson()
        self.memoryK()

    def _calculation(self):
        def func(Z1, Z2, Z3):
            if Z1 != 'null':
                return Z1
            if Z2 != 'null':
                return Z2
            if Z3 != 'null':
                return Z3

        self.calc_x_y()
        # теперь мы знаем конц x и y, далее опять по статье
        self.calc_Ab_Bp()
        self.calc_Av_Bv()
        # куб уравнение
        Z1, Z2, Z3 = self.calcCubeExp(self.Bv - 1, self.Av - 2 * self.Bv - 3 * math.pow(self.Bv, 2),
                                      (-self.Av + math.pow(self.Bv, 2) + self.Bv) * self.Bv)
        self.Zv = func(Z1, Z2, Z3)
        if (self.Zv==1):
            return False
        self.calc_Al_Bl()
        # куб уравнение
        Z1, Z2, Z3 = self.calcCubeExp(self.Bl - 1, self.Al - 2 * self.Bl - 3 * math.pow(self.Bl, 2),
                                      (-self.Al + math.pow(self.Bl, 2) + self.Bl) * self.Bl)
        self.Zl = func(Z1, Z2, Z3)
        if (self.Zl==1):
            return False
        self.calc_Fiv_Fil()
        self.calcK_PR()
        return True

    def calculation(self):
        self.pred_calculation()
        self._calculation()
        while self.calc_pogr() > 0.0001:
            self.memoryK()
            if not self._calculation():
                break
        print(self.e)
        print(self.K)
        print(self.conz_x)
        print(self.conz_y)

    def calc_k_J_T(self):
        '''Расчет коэффициента Джоуля-Томсона'''
        self.calculation()
        #z1 = self.Zv
        #t0  = self.T
        #alfa = 0.0001
        #self.T = self.T+alfa
        #self.calculation()
        #z2 = self.Zv
        #http://vesti-gas.ru/sites/default/files/attachments/vgn-1-42-2020-023-031.pdf
        # https://neftegas.info/upload/iblock/4d9/4d9537ab49679682f7211efb2ae23517.pdf
        #mu = (t0+273.15)**2*self.R/(self.p/1000*self.get_Cp()*1000)*(z2-z1)/alfa +(t0+273.15)*self.R*z1/(self.p/1000*self.get_Cp()*1000)
        #print(mu)

    def get_Cp(self):
        '''Функция для расчета '''
        self.calc_conz_x_to_w()
        Cv = 0
        for i in range(self.N_comp):
            Cv += self.w_conz[i]*(self.a_Cp[0][i]+self.a_Cp[1][i]*(self.T+273.15)+self.a_Cp[2][i]*(self.T+273.15)**2+
                                self.a_Cp[3][i] * (self.T + 273.15)**3 + self.a_Cp[4][i]*(self.T+273.15)**4)
        Mr_s = self.get_Mr()
        Cp = (Cv*Mr_s+self.R)/Mr_s
        return Cp

    def get_Mr(self):
        '''Функция для расчета средней молекулярной массы'''
        Mr_s = 0
        for i in range(self.N_comp):
            Mr_s += self.conz[i] * self.Mr[i]
        return Mr_s

    def get_H(self):
        '''Функция для расчета энтальпии'''
        self.calc_conz_x_to_w()
        H = 0
        for i in range(self.N_comp):
            H += self.w_conz[i] * (self.a_H[0][i] + self.a_H[1][i] * (self.T + 273.15) + self.a_H[2][i] * (
                        self.T + 273.15) ** 2 +
                                  self.a_H[3][i] * (self.T + 273.15) ** 3 + self.a_H[4][i] * (self.T + 273.15) ** 4
                                 + self.a_H[5][i] * (self.T + 273.15) ** 5)
        return H

    def calc_conz_x_to_w(self):
        '''Пересчет из мольнхых долей в массовые'''
        Mr_s = self.get_Mr()
        for i in range(self.N_comp):
            self.w_conz[i] = self.Mr[i]/Mr_s*self.conz[i]

    def calc_mathanol(self):
        # Tp = float(input("Введите температуру рабочего потока, C: "))'
        # u = float(input("Введите коэффициент эжекции (расход низконапорного газа к рабочему газу): "))'
        # Tn = float(input("Введите температуру низконапорного потока, C: "))'
        # Pp = float(input("Введите давление рабочего газа, МПа: "))'
        # Pc = float(input("Введите давление газа на выходе из эжектора, МПа: "))'
        # Cp = float(input("Введите среднюю изобарную теплоемкость газа, кДж/кг*К: "))'
        Tp = 35
        u = 1
        Tn = 22
        Pp = 8
        Pc = 6
        'Cp = 2.23'
        E1 = 0.98 * 10 ** 6
        E2 = 1.5
        Tp_ = Tp + 273
        Tn_ = Tn + 273

        Cp = 1.696 + 1.838 * 10 ** (-3) * Tp_ + 1.96 * (10 ** 6) * (Pp - 1) / Tp_ ** 3
        D = (1 / (Cp * 1000)) * (E1 / Tp ** 2 - E2)
        print("коэффициент Джоуля-Томпсона равен", round(D, 3), "К/МПа")

        Tc = (Tp_ + u * Tn_ - D * (Pp - Pc)) / (1 + u)
        Tc1 = Tc - 273
        print("температура на выходе из эжектора равна", round(Tc1))

        Db = 0.5
        Dm = 0.2
        V = 150000  # м3/ч
        g = 9.81
        Pl = 0.72  # кг/м3
        Pn = 2
        u1 = (V/3600)/(0.785*Db**2)
        u2 = (V/3600)/(0.785*Dm**2)
        DeltaP = ((Pl*(u2**2-u1**2))/2)*10**(-3)
        print(DeltaP, "кПа")

        Pej = Pp-(DeltaP*10**(-3))

        if Pej<Pn:
           print("эжектор работает")
        else:
           print("эжектор не работает")


if __name__ == '__main__':
    F = FlowPR()
    '''F.calculation()
    ee = []
    ee1 = []
    for i in range(-70, -52):
        F.T = i
        F.calculation()
        ee.append(i)
        ee1.append(F.e)
    print(ee)
    print(ee1)'''
    F.calc_k_J_T()
    #F.calc_mathanol()


